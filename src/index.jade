doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Drunk on the Panacea

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Drunk on the Panacea

      section
        h3.bullet The Stars of the Show
        ul
          li <template></template>
          li <link rel="import">
          li document.register()
          li element.createShadowRoot()

      section
        h2 "A tectonic shift in web development"

      section
        h2 "The declaritive simplicity will be unparalelled"

      section
        h2 "Well everyone else is excited, so I am excited too"

      section
        h2 Disclaimer: I love web components!

      section
        h2 ... but let's be grounded in reality about them.

      section
        h2 General Over-rching Concerns

      section
        h2 Lots of educational materials...
        h2 but it's still hard to understand.

      section
        h2 You have to understand four different technologies

      section
        h2 Explainer articles often have idealized, not real world examples

      section
        h2 Google's Polymer != Web Components

      section
        h2 Making non-visual components into custom elements

      section
        h2 HTML Imports

      section
        h2 Need convention with your team for handling ordering of dependencies

      section
        h2 Have to avoid hammering our server with requests

      section
        h2 No async or defer like script, html imports are block always

      section
        h2.bullet Build Tools for HTML Imports
        ul
          li Good: Vulcanizr (turns all imports into one import)
          li Better: Introvert (turns all imports into JS)

      section
        h2 HTML imports require a polyfill [placeholder for current compat table]

      section
        h2 Doesn't work with file:/// protocols because it does a hidden XMLHttpRequest

      section
        h2 HTML Templates

      section
        h2 Does what it says on the tin - very basic element, inert until injected into document
        h2 [placeholder for compat table]

      section
        h2 No two-way binding, no binding at all

      section
        h2 Custom elements

      section
        h2 Arguably the most useful!

      section
        h2 once an element is registered, cannot register another "version"

      section
        h2 [placeholder for example to clairfy multiple registrations problem]

      section
        h2 Shadow DOM

      section
        h2 Many shadow trees mean perf problems [placeholder for some numbers/tests]

      section
        h2 Ordering of <content> tag matters/affects the children of the host element

      section
        h2 What to put in the Shadow DOM and what not to?

      section
        h2 Special CSS selectors and functions penetrate soft boundary 
        h2 (and are not well supported)

      section
        h2 Why use Shadow DOM at all?

      section
        h2 Why persist shadow roots?

      section
        h2 I just want to get by - what's the most important thing to learn?

      section
        ul
          li <custom-element>
          li Thinking in Components (and getting your designer too as well)

      section
        h2 Let's look at the most popular frameworks

      section
        h2 [placeholder for examples of custom element components]
      section
        h2 Thinking in Components

      section
        h2 [placeholder for image of nested component concepts]

      section
        h2 Accessibility Always [placeholder to link to marcy's accessibility talks]

      section
        h2.bullet Who is using web components?
        ul
          li Google, pretty obviously
          li Github widget [note: ask Github to confirm this rumor]
          li uhhh

      section
        h2 Your most important use classes

      section
        h2.bullet Implications for Mobile [placeholder for FxOS device photo]
        ul
          li Poor support means polyfill is absolutely needed
          li Polyfill is huge, maybe ok with packaged apps
          li not so great for hosted apps

      section
        h2 Where do we go from here?

      section
        h2 Natural Selection [placeholder for nice metaphor image]
        h2 (some will stick around, others will fall by the wayside)

      section
        h2 Is the adoption of every API necessary to advance the web?
        h2 (maybe we learn from mistakes but throw away what does not work)

      //- section
      //-   h2 Syntax Highlighting
      //-   h3 Powered by <a href="http://twitter.com/LeaVerou">Lea Verou</a>'s <a href="https://github.com/LeaVerou/prism">Prism</a>
      //-   pre
      //-     code.language-javascript.
      //-       bespoke.from('article', [
      //-         classes(),
      //-         keys(),
      //-         touch(),
      //-         bullets('li, .bullet')
      //-       ]);

      section
        h2 Thanks!
        h3
          a(href='http://twitter.com/hopefulcyborg')  -@hopefulcyborg

            

    script(src='build/build.js')